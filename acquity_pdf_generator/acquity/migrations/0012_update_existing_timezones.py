# Generated by Django 4.2.23 on 2025-08-16 08:48

from django.db import migrations
from django.utils import timezone
from zoneinfo import ZoneInfo
from datetime import datetime


def update_existing_timezones(apps, schema_editor):
    """
    Update existing appointments with correct timezone information.
    This migration assumes that existing appointment times were stored in UTC
    but were originally from different timezones. We'll estimate the timezone
    based on common US timezone patterns.
    """
    Appointment = apps.get_model('acquity', 'Appointment')
    
    # Common US timezone mappings based on typical business hours
    # This is an estimation - for more accuracy, you might want to re-sync from Acuity
    timezone_mappings = {
        'America/New_York': ['EST', 'EDT', 'Eastern'],
        'America/Chicago': ['CST', 'CDT', 'Central'],
        'America/Denver': ['MST', 'MDT', 'Mountain'],
        'America/Los_Angeles': ['PST', 'PDT', 'Pacific'],
        'America/Anchorage': ['AKST', 'AKDT', 'Alaska'],
        'Pacific/Honolulu': ['HST', 'Hawaii'],
    }
    
    # Default timezone if we can't determine (most common in US)
    default_timezone = 'America/New_York'
    
    print(f"Starting timezone update for existing appointments...")
    updated_count = 0
    
    for appointment in Appointment.objects.all():
        try:
            # Skip if already has timezone
            if appointment.original_timezone:
                continue
                
            # Try to determine timezone from form_data if available
            timezone_found = False
            
            if appointment.form_data:
                forms = appointment.form_data
                for form in forms:
                    for field in form.get('values', []):
                        field_name = field.get('name', '').lower()
                        field_value = field.get('value', '').lower()
                        
                        # Look for timezone indicators in form data
                        for tz_name, indicators in timezone_mappings.items():
                            for indicator in indicators:
                                if indicator.lower() in field_name or indicator.lower() in field_value:
                                    appointment.original_timezone = tz_name
                                    timezone_found = True
                                    break
                            if timezone_found:
                                break
                        if timezone_found:
                            break
                    if timezone_found:
                        break
            
            # If no timezone found in form data, use default
            if not timezone_found:
                appointment.original_timezone = default_timezone
            
            appointment.save(update_fields=['original_timezone'])
            updated_count += 1
            
            if updated_count % 100 == 0:
                print(f"Updated {updated_count} appointments...")
                
        except Exception as e:
            print(f"Error updating appointment {appointment.id}: {e}")
            # Set default timezone on error
            appointment.original_timezone = default_timezone
            appointment.save(update_fields=['original_timezone'])
    
    print(f"Timezone update completed. Updated {updated_count} appointments.")
    print(f"All appointments now have timezone information.")


def reverse_update_existing_timezones(apps, schema_editor):
    """
    Reverse the timezone update (set all timezones back to empty).
    """
    Appointment = apps.get_model('acquity', 'Appointment')
    Appointment.objects.all().update(original_timezone='')
    print("Reversed timezone update - all timezones cleared.")


class Migration(migrations.Migration):

    dependencies = [
        ('acquity', '0011_add_original_timezone'),
    ]

    operations = [
        migrations.RunPython(
            update_existing_timezones,
            reverse_update_existing_timezones,
        ),
    ]
